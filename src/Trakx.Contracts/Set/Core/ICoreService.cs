using System.Collections.Generic;
using System.Numerics;
using System.Threading;
using System.Threading.Tasks;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.RPC.Eth.DTOs;
using Trakx.Contracts.Set.Core.ContractDefinition;

namespace Trakx.Contracts.Set.Core
{
    public interface ICoreService
    {
        ContractHandler ContractHandler { get; }
        Task<string> WithdrawModuleRequestAsync(WithdrawModuleFunction withdrawModuleFunction);
        Task<TransactionReceipt> WithdrawModuleRequestAndWaitForReceiptAsync(WithdrawModuleFunction withdrawModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> WithdrawModuleRequestAsync(string from, string to, string token, BigInteger quantity);
        Task<TransactionReceipt> WithdrawModuleRequestAndWaitForReceiptAsync(string from, string to, string token, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<bool> ValidFactoriesQueryAsync(ValidFactoriesFunction validFactoriesFunction, BlockParameter blockParameter = null);
        Task<bool> ValidFactoriesQueryAsync(string factory, BlockParameter blockParameter = null);
        Task<string> RemoveExchangeRequestAsync(RemoveExchangeFunction removeExchangeFunction);
        Task<TransactionReceipt> RemoveExchangeRequestAndWaitForReceiptAsync(RemoveExchangeFunction removeExchangeFunction, CancellationTokenSource cancellationToken = null);
        Task<string> RemoveExchangeRequestAsync(byte exchangeId, string exchange);
        Task<TransactionReceipt> RemoveExchangeRequestAndWaitForReceiptAsync(byte exchangeId, string exchange, CancellationTokenSource cancellationToken = null);
        Task<BigInteger> TimeLockedUpgradesQueryAsync(TimeLockedUpgradesFunction timeLockedUpgradesFunction, BlockParameter blockParameter = null);
        Task<BigInteger> TimeLockedUpgradesQueryAsync(byte[] returnValue1, BlockParameter blockParameter = null);
        Task<string> ReenableSetRequestAsync(ReenableSetFunction reenableSetFunction);
        Task<TransactionReceipt> ReenableSetRequestAndWaitForReceiptAsync(ReenableSetFunction reenableSetFunction, CancellationTokenSource cancellationToken = null);
        Task<string> ReenableSetRequestAsync(string set);
        Task<TransactionReceipt> ReenableSetRequestAndWaitForReceiptAsync(string set, CancellationTokenSource cancellationToken = null);
        Task<string> RedeemAndWithdrawToRequestAsync(RedeemAndWithdrawToFunction redeemAndWithdrawToFunction);
        Task<TransactionReceipt> RedeemAndWithdrawToRequestAndWaitForReceiptAsync(RedeemAndWithdrawToFunction redeemAndWithdrawToFunction, CancellationTokenSource cancellationToken = null);
        Task<string> RedeemAndWithdrawToRequestAsync(string set, string to, BigInteger quantity, BigInteger toExclude);
        Task<TransactionReceipt> RedeemAndWithdrawToRequestAndWaitForReceiptAsync(string set, string to, BigInteger quantity, BigInteger toExclude, CancellationTokenSource cancellationToken = null);
        Task<string> RedeemRequestAsync(RedeemFunction redeemFunction);
        Task<TransactionReceipt> RedeemRequestAndWaitForReceiptAsync(RedeemFunction redeemFunction, CancellationTokenSource cancellationToken = null);
        Task<string> RedeemRequestAsync(string set, BigInteger quantity);
        Task<TransactionReceipt> RedeemRequestAndWaitForReceiptAsync(string set, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> AddModuleRequestAsync(AddModuleFunction addModuleFunction);
        Task<TransactionReceipt> AddModuleRequestAndWaitForReceiptAsync(AddModuleFunction addModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> AddModuleRequestAsync(string module);
        Task<TransactionReceipt> AddModuleRequestAndWaitForReceiptAsync(string module, CancellationTokenSource cancellationToken = null);
        Task<List<string>> ExchangesQueryAsync(ExchangesFunction exchangesFunction, BlockParameter blockParameter = null);
        Task<List<string>> ExchangesQueryAsync(BlockParameter blockParameter = null);
        Task<string> AddFactoryRequestAsync(AddFactoryFunction addFactoryFunction);
        Task<TransactionReceipt> AddFactoryRequestAndWaitForReceiptAsync(AddFactoryFunction addFactoryFunction, CancellationTokenSource cancellationToken = null);
        Task<string> AddFactoryRequestAsync(string factory);
        Task<TransactionReceipt> AddFactoryRequestAndWaitForReceiptAsync(string factory, CancellationTokenSource cancellationToken = null);
        Task<string> BatchDepositRequestAsync(BatchDepositFunction batchDepositFunction);
        Task<TransactionReceipt> BatchDepositRequestAndWaitForReceiptAsync(BatchDepositFunction batchDepositFunction, CancellationTokenSource cancellationToken = null);
        Task<string> BatchDepositRequestAsync(List<string> tokens, List<BigInteger> quantities);
        Task<TransactionReceipt> BatchDepositRequestAndWaitForReceiptAsync(List<string> tokens, List<BigInteger> quantities, CancellationTokenSource cancellationToken = null);
        Task<string> BatchIncrementTokenOwnerModuleRequestAsync(BatchIncrementTokenOwnerModuleFunction batchIncrementTokenOwnerModuleFunction);
        Task<TransactionReceipt> BatchIncrementTokenOwnerModuleRequestAndWaitForReceiptAsync(BatchIncrementTokenOwnerModuleFunction batchIncrementTokenOwnerModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> BatchIncrementTokenOwnerModuleRequestAsync(List<string> tokens, string owner, List<BigInteger> quantities);
        Task<TransactionReceipt> BatchIncrementTokenOwnerModuleRequestAndWaitForReceiptAsync(List<string> tokens, string owner, List<BigInteger> quantities, CancellationTokenSource cancellationToken = null);
        Task<string> RemovePriceLibraryRequestAsync(RemovePriceLibraryFunction removePriceLibraryFunction);
        Task<TransactionReceipt> RemovePriceLibraryRequestAndWaitForReceiptAsync(RemovePriceLibraryFunction removePriceLibraryFunction, CancellationTokenSource cancellationToken = null);
        Task<string> RemovePriceLibraryRequestAsync(string priceLibrary);
        Task<TransactionReceipt> RemovePriceLibraryRequestAndWaitForReceiptAsync(string priceLibrary, CancellationTokenSource cancellationToken = null);
        Task<string> DepositRequestAsync(DepositFunction depositFunction);
        Task<TransactionReceipt> DepositRequestAndWaitForReceiptAsync(DepositFunction depositFunction, CancellationTokenSource cancellationToken = null);
        Task<string> DepositRequestAsync(string token, BigInteger quantity);
        Task<TransactionReceipt> DepositRequestAndWaitForReceiptAsync(string token, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> RemoveFactoryRequestAsync(RemoveFactoryFunction removeFactoryFunction);
        Task<TransactionReceipt> RemoveFactoryRequestAndWaitForReceiptAsync(RemoveFactoryFunction removeFactoryFunction, CancellationTokenSource cancellationToken = null);
        Task<string> RemoveFactoryRequestAsync(string factory);
        Task<TransactionReceipt> RemoveFactoryRequestAndWaitForReceiptAsync(string factory, CancellationTokenSource cancellationToken = null);
        Task<string> AddExchangeRequestAsync(AddExchangeFunction addExchangeFunction);
        Task<TransactionReceipt> AddExchangeRequestAndWaitForReceiptAsync(AddExchangeFunction addExchangeFunction, CancellationTokenSource cancellationToken = null);
        Task<string> AddExchangeRequestAsync(byte exchangeId, string exchange);
        Task<TransactionReceipt> AddExchangeRequestAndWaitForReceiptAsync(byte exchangeId, string exchange, CancellationTokenSource cancellationToken = null);
        Task<string> BatchTransferModuleRequestAsync(BatchTransferModuleFunction batchTransferModuleFunction);
        Task<TransactionReceipt> BatchTransferModuleRequestAndWaitForReceiptAsync(BatchTransferModuleFunction batchTransferModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> BatchTransferModuleRequestAsync(List<string> tokens, List<BigInteger> quantities, string from, string to);
        Task<TransactionReceipt> BatchTransferModuleRequestAndWaitForReceiptAsync(List<string> tokens, List<BigInteger> quantities, string from, string to, CancellationTokenSource cancellationToken = null);
        Task<string> SetOperationStateRequestAsync(SetOperationStateFunction setOperationStateFunction);
        Task<TransactionReceipt> SetOperationStateRequestAndWaitForReceiptAsync(SetOperationStateFunction setOperationStateFunction, CancellationTokenSource cancellationToken = null);
        Task<string> SetOperationStateRequestAsync(byte operationState);
        Task<TransactionReceipt> SetOperationStateRequestAndWaitForReceiptAsync(byte operationState, CancellationTokenSource cancellationToken = null);
        Task<List<string>> SetTokensQueryAsync(SetTokensFunction setTokensFunction, BlockParameter blockParameter = null);
        Task<List<string>> SetTokensQueryAsync(BlockParameter blockParameter = null);
        Task<string> BatchTransferBalanceModuleRequestAsync(BatchTransferBalanceModuleFunction batchTransferBalanceModuleFunction);
        Task<TransactionReceipt> BatchTransferBalanceModuleRequestAndWaitForReceiptAsync(BatchTransferBalanceModuleFunction batchTransferBalanceModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> BatchTransferBalanceModuleRequestAsync(List<string> tokens, string from, string to, List<BigInteger> quantities);
        Task<TransactionReceipt> BatchTransferBalanceModuleRequestAndWaitForReceiptAsync(List<string> tokens, string from, string to, List<BigInteger> quantities, CancellationTokenSource cancellationToken = null);
        Task<string> ExchangeIdsQueryAsync(ExchangeIdsFunction exchangeIdsFunction, BlockParameter blockParameter = null);
        Task<string> ExchangeIdsQueryAsync(byte exchangeId, BlockParameter blockParameter = null);
        Task<string> RedeemModuleRequestAsync(RedeemModuleFunction redeemModuleFunction);
        Task<TransactionReceipt> RedeemModuleRequestAndWaitForReceiptAsync(RedeemModuleFunction redeemModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> RedeemModuleRequestAsync(string burnAddress, string incrementAddress, string set, BigInteger quantity);
        Task<TransactionReceipt> RedeemModuleRequestAndWaitForReceiptAsync(string burnAddress, string incrementAddress, string set, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> InternalTransferRequestAsync(InternalTransferFunction internalTransferFunction);
        Task<TransactionReceipt> InternalTransferRequestAndWaitForReceiptAsync(InternalTransferFunction internalTransferFunction, CancellationTokenSource cancellationToken = null);
        Task<string> InternalTransferRequestAsync(string token, string to, BigInteger quantity);
        Task<TransactionReceipt> InternalTransferRequestAndWaitForReceiptAsync(string token, string to, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> CreateSetRequestAsync(CreateSetFunction createSetFunction);
        Task<TransactionReceipt> CreateSetRequestAndWaitForReceiptAsync(CreateSetFunction createSetFunction, CancellationTokenSource cancellationToken = null);
        Task<string> CreateSetRequestAsync(string factory, List<string> components, List<BigInteger> units, BigInteger naturalUnit, byte[] name, byte[] symbol, byte[] callData);
        Task<TransactionReceipt> CreateSetRequestAndWaitForReceiptAsync(string factory, List<string> components, List<BigInteger> units, BigInteger naturalUnit, byte[] name, byte[] symbol, byte[] callData, CancellationTokenSource cancellationToken = null);
        Task<bool> ValidModulesQueryAsync(ValidModulesFunction validModulesFunction, BlockParameter blockParameter = null);
        Task<bool> ValidModulesQueryAsync(string module, BlockParameter blockParameter = null);
        Task<string> TransferProxyQueryAsync(TransferProxyFunction transferProxyFunction, BlockParameter blockParameter = null);
        Task<string> TransferProxyQueryAsync(BlockParameter blockParameter = null);
        Task<string> RenounceOwnershipRequestAsync(RenounceOwnershipFunction renounceOwnershipFunction);
        Task<string> RenounceOwnershipRequestAsync();
        Task<TransactionReceipt> RenounceOwnershipRequestAndWaitForReceiptAsync(RenounceOwnershipFunction renounceOwnershipFunction, CancellationTokenSource cancellationToken = null);
        Task<TransactionReceipt> RenounceOwnershipRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null);
        Task<byte> OperationStateQueryAsync(OperationStateFunction operationStateFunction, BlockParameter blockParameter = null);
        Task<byte> OperationStateQueryAsync(BlockParameter blockParameter = null);
        Task<string> IssueToRequestAsync(IssueToFunction issueToFunction);
        Task<TransactionReceipt> IssueToRequestAndWaitForReceiptAsync(IssueToFunction issueToFunction, CancellationTokenSource cancellationToken = null);
        Task<string> IssueToRequestAsync(string recipient, string set, BigInteger quantity);
        Task<TransactionReceipt> IssueToRequestAndWaitForReceiptAsync(string recipient, string set, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> DisableSetRequestAsync(DisableSetFunction disableSetFunction);
        Task<TransactionReceipt> DisableSetRequestAndWaitForReceiptAsync(DisableSetFunction disableSetFunction, CancellationTokenSource cancellationToken = null);
        Task<string> DisableSetRequestAsync(string set);
        Task<TransactionReceipt> DisableSetRequestAndWaitForReceiptAsync(string set, CancellationTokenSource cancellationToken = null);
        Task<BigInteger> TimeLockPeriodQueryAsync(TimeLockPeriodFunction timeLockPeriodFunction, BlockParameter blockParameter = null);
        Task<BigInteger> TimeLockPeriodQueryAsync(BlockParameter blockParameter = null);
        Task<string> IssueInVaultModuleRequestAsync(IssueInVaultModuleFunction issueInVaultModuleFunction);
        Task<TransactionReceipt> IssueInVaultModuleRequestAndWaitForReceiptAsync(IssueInVaultModuleFunction issueInVaultModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> IssueInVaultModuleRequestAsync(string recipient, string set, BigInteger quantity);
        Task<TransactionReceipt> IssueInVaultModuleRequestAndWaitForReceiptAsync(string recipient, string set, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> IssueModuleRequestAsync(IssueModuleFunction issueModuleFunction);
        Task<TransactionReceipt> IssueModuleRequestAndWaitForReceiptAsync(IssueModuleFunction issueModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> IssueModuleRequestAsync(string componentOwner, string setRecipient, string set, BigInteger quantity);
        Task<TransactionReceipt> IssueModuleRequestAndWaitForReceiptAsync(string componentOwner, string setRecipient, string set, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> IssueRequestAsync(IssueFunction issueFunction);
        Task<TransactionReceipt> IssueRequestAndWaitForReceiptAsync(IssueFunction issueFunction, CancellationTokenSource cancellationToken = null);
        Task<string> IssueRequestAsync(string set, BigInteger quantity);
        Task<TransactionReceipt> IssueRequestAndWaitForReceiptAsync(string set, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> OwnerQueryAsync(OwnerFunction ownerFunction, BlockParameter blockParameter = null);
        Task<string> OwnerQueryAsync(BlockParameter blockParameter = null);
        Task<bool> IsOwnerQueryAsync(IsOwnerFunction isOwnerFunction, BlockParameter blockParameter = null);
        Task<bool> IsOwnerQueryAsync(BlockParameter blockParameter = null);
        Task<string> SetTimeLockPeriodRequestAsync(SetTimeLockPeriodFunction setTimeLockPeriodFunction);
        Task<TransactionReceipt> SetTimeLockPeriodRequestAndWaitForReceiptAsync(SetTimeLockPeriodFunction setTimeLockPeriodFunction, CancellationTokenSource cancellationToken = null);
        Task<string> SetTimeLockPeriodRequestAsync(BigInteger timeLockPeriod);
        Task<TransactionReceipt> SetTimeLockPeriodRequestAndWaitForReceiptAsync(BigInteger timeLockPeriod, CancellationTokenSource cancellationToken = null);
        Task<string> RemoveModuleRequestAsync(RemoveModuleFunction removeModuleFunction);
        Task<TransactionReceipt> RemoveModuleRequestAndWaitForReceiptAsync(RemoveModuleFunction removeModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> RemoveModuleRequestAsync(string module);
        Task<TransactionReceipt> RemoveModuleRequestAndWaitForReceiptAsync(string module, CancellationTokenSource cancellationToken = null);
        Task<bool> ValidPriceLibrariesQueryAsync(ValidPriceLibrariesFunction validPriceLibrariesFunction, BlockParameter blockParameter = null);
        Task<bool> ValidPriceLibrariesQueryAsync(string priceLibrary, BlockParameter blockParameter = null);
        Task<string> IssueInVaultRequestAsync(IssueInVaultFunction issueInVaultFunction);
        Task<TransactionReceipt> IssueInVaultRequestAndWaitForReceiptAsync(IssueInVaultFunction issueInVaultFunction, CancellationTokenSource cancellationToken = null);
        Task<string> IssueInVaultRequestAsync(string set, BigInteger quantity);
        Task<TransactionReceipt> IssueInVaultRequestAndWaitForReceiptAsync(string set, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> RedeemInVaultRequestAsync(RedeemInVaultFunction redeemInVaultFunction);
        Task<TransactionReceipt> RedeemInVaultRequestAndWaitForReceiptAsync(RedeemInVaultFunction redeemInVaultFunction, CancellationTokenSource cancellationToken = null);
        Task<string> RedeemInVaultRequestAsync(string set, BigInteger quantity);
        Task<TransactionReceipt> RedeemInVaultRequestAndWaitForReceiptAsync(string set, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<StateOutputDTO> StateQueryAsync(StateFunction stateFunction, BlockParameter blockParameter = null);
        Task<StateOutputDTO> StateQueryAsync(BlockParameter blockParameter = null);
        Task<string> BatchDecrementTokenOwnerModuleRequestAsync(BatchDecrementTokenOwnerModuleFunction batchDecrementTokenOwnerModuleFunction);
        Task<TransactionReceipt> BatchDecrementTokenOwnerModuleRequestAndWaitForReceiptAsync(BatchDecrementTokenOwnerModuleFunction batchDecrementTokenOwnerModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> BatchDecrementTokenOwnerModuleRequestAsync(List<string> tokens, string owner, List<BigInteger> quantities);
        Task<TransactionReceipt> BatchDecrementTokenOwnerModuleRequestAndWaitForReceiptAsync(List<string> tokens, string owner, List<BigInteger> quantities, CancellationTokenSource cancellationToken = null);
        Task<string> BatchDepositModuleRequestAsync(BatchDepositModuleFunction batchDepositModuleFunction);
        Task<TransactionReceipt> BatchDepositModuleRequestAndWaitForReceiptAsync(BatchDepositModuleFunction batchDepositModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> BatchDepositModuleRequestAsync(string from, string to, List<string> tokens, List<BigInteger> quantities);
        Task<TransactionReceipt> BatchDepositModuleRequestAndWaitForReceiptAsync(string from, string to, List<string> tokens, List<BigInteger> quantities, CancellationTokenSource cancellationToken = null);
        Task<List<string>> PriceLibrariesQueryAsync(PriceLibrariesFunction priceLibrariesFunction, BlockParameter blockParameter = null);
        Task<List<string>> PriceLibrariesQueryAsync(BlockParameter blockParameter = null);
        Task<bool> DisabledSetsQueryAsync(DisabledSetsFunction disabledSetsFunction, BlockParameter blockParameter = null);
        Task<bool> DisabledSetsQueryAsync(string set, BlockParameter blockParameter = null);
        Task<string> DepositModuleRequestAsync(DepositModuleFunction depositModuleFunction);
        Task<TransactionReceipt> DepositModuleRequestAndWaitForReceiptAsync(DepositModuleFunction depositModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> DepositModuleRequestAsync(string from, string to, string token, BigInteger quantity);
        Task<TransactionReceipt> DepositModuleRequestAndWaitForReceiptAsync(string from, string to, string token, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> BatchWithdrawRequestAsync(BatchWithdrawFunction batchWithdrawFunction);
        Task<TransactionReceipt> BatchWithdrawRequestAndWaitForReceiptAsync(BatchWithdrawFunction batchWithdrawFunction, CancellationTokenSource cancellationToken = null);
        Task<string> BatchWithdrawRequestAsync(List<string> tokens, List<BigInteger> quantities);
        Task<TransactionReceipt> BatchWithdrawRequestAndWaitForReceiptAsync(List<string> tokens, List<BigInteger> quantities, CancellationTokenSource cancellationToken = null);
        Task<string> AddPriceLibraryRequestAsync(AddPriceLibraryFunction addPriceLibraryFunction);
        Task<TransactionReceipt> AddPriceLibraryRequestAndWaitForReceiptAsync(AddPriceLibraryFunction addPriceLibraryFunction, CancellationTokenSource cancellationToken = null);
        Task<string> AddPriceLibraryRequestAsync(string priceLibrary);
        Task<TransactionReceipt> AddPriceLibraryRequestAndWaitForReceiptAsync(string priceLibrary, CancellationTokenSource cancellationToken = null);
        Task<string> RedeemToRequestAsync(RedeemToFunction redeemToFunction);
        Task<TransactionReceipt> RedeemToRequestAndWaitForReceiptAsync(RedeemToFunction redeemToFunction, CancellationTokenSource cancellationToken = null);
        Task<string> RedeemToRequestAsync(string recipient, string set, BigInteger quantity);
        Task<TransactionReceipt> RedeemToRequestAndWaitForReceiptAsync(string recipient, string set, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<string> TransferOwnershipRequestAsync(TransferOwnershipFunction transferOwnershipFunction);
        Task<TransactionReceipt> TransferOwnershipRequestAndWaitForReceiptAsync(TransferOwnershipFunction transferOwnershipFunction, CancellationTokenSource cancellationToken = null);
        Task<string> TransferOwnershipRequestAsync(string newOwner);
        Task<TransactionReceipt> TransferOwnershipRequestAndWaitForReceiptAsync(string newOwner, CancellationTokenSource cancellationToken = null);
        Task<string> WithdrawRequestAsync(WithdrawFunction withdrawFunction);
        Task<TransactionReceipt> WithdrawRequestAndWaitForReceiptAsync(WithdrawFunction withdrawFunction, CancellationTokenSource cancellationToken = null);
        Task<string> WithdrawRequestAsync(string token, BigInteger quantity);
        Task<TransactionReceipt> WithdrawRequestAndWaitForReceiptAsync(string token, BigInteger quantity, CancellationTokenSource cancellationToken = null);
        Task<List<string>> ModulesQueryAsync(ModulesFunction modulesFunction, BlockParameter blockParameter = null);
        Task<List<string>> ModulesQueryAsync(BlockParameter blockParameter = null);
        Task<string> VaultQueryAsync(VaultFunction vaultFunction, BlockParameter blockParameter = null);
        Task<string> VaultQueryAsync(BlockParameter blockParameter = null);
        Task<string> TransferModuleRequestAsync(TransferModuleFunction transferModuleFunction);
        Task<TransactionReceipt> TransferModuleRequestAndWaitForReceiptAsync(TransferModuleFunction transferModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> TransferModuleRequestAsync(string token, BigInteger quantity, string from, string to);
        Task<TransactionReceipt> TransferModuleRequestAndWaitForReceiptAsync(string token, BigInteger quantity, string from, string to, CancellationTokenSource cancellationToken = null);
        Task<List<string>> FactoriesQueryAsync(FactoriesFunction factoriesFunction, BlockParameter blockParameter = null);
        Task<List<string>> FactoriesQueryAsync(BlockParameter blockParameter = null);
        Task<string> BatchWithdrawModuleRequestAsync(BatchWithdrawModuleFunction batchWithdrawModuleFunction);
        Task<TransactionReceipt> BatchWithdrawModuleRequestAndWaitForReceiptAsync(BatchWithdrawModuleFunction batchWithdrawModuleFunction, CancellationTokenSource cancellationToken = null);
        Task<string> BatchWithdrawModuleRequestAsync(string from, string to, List<string> tokens, List<BigInteger> quantities);
        Task<TransactionReceipt> BatchWithdrawModuleRequestAndWaitForReceiptAsync(string from, string to, List<string> tokens, List<BigInteger> quantities, CancellationTokenSource cancellationToken = null);
        Task<bool> ValidSetsQueryAsync(ValidSetsFunction validSetsFunction, BlockParameter blockParameter = null);
        Task<bool> ValidSetsQueryAsync(string set, BlockParameter blockParameter = null);
    }
}