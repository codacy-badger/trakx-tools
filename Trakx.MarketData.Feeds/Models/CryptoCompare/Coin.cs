// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var cryptoCompareResponse = CryptoCompareResponse.FromJson(jsonString);

using System;
using System.Globalization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Trakx.MarketData.Feeds.Common.Converters;
using Trakx.MarketData.Feeds.Common.Models.CryptoCompare;

namespace Trakx.MarketData.Feeds.Models.CryptoCompare
{
    public class Coin : ICoin
    {
        public Coin(
            long id,
            string url,
            string imageUrl,
            string name,
            string symbol,
            string coinName,
            string fullName,
            string algorithm,
            string proofType,
            long fullyPremined,
            string totalCoinSupply,
            long? builtOn,
            string smartContractAddress,
            decimal? preMinedValue,
            ulong? totalCoinsFreeFloat,
            long sortOrder,
            bool sponsored,
            bool isTrading)
        {
            Id = id;
            Url = url;
            ImageUrl = imageUrl;
            Name = name;
            Symbol = symbol;
            CoinName = coinName;
            FullName = fullName;
            Algorithm = algorithm;
            ProofType = proofType;
            FullyPremined = fullyPremined;
            TotalCoinSupply = totalCoinSupply;
            BuiltOn = builtOn;
            SmartContractAddress = smartContractAddress;
            PreMinedValue = preMinedValue;
            TotalCoinsFreeFloat = totalCoinsFreeFloat;
            SortOrder = sortOrder;
            Sponsored = sponsored;
            IsTrading = isTrading;
        }

        [JsonProperty("Id")]
        public long Id { get; }

        [JsonProperty("Url")]
        public string Url { get; }

        [JsonProperty("ImageUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string ImageUrl { get; }

        [JsonProperty("Name")]
        public string Name { get; }

        [JsonProperty("Symbol")]
        public string Symbol { get; }

        [JsonProperty("CoinName")]
        public string CoinName { get; }

        [JsonProperty("FullName")]
        public string FullName { get; }

        [JsonProperty("Algorithm")]
        public string Algorithm { get; }

        [JsonProperty("ProofType")]
        public string ProofType { get; }

        [JsonProperty("FullyPremined")]
        public long FullyPremined { get; }

        [JsonProperty("TotalCoinSupply")]
        public string TotalCoinSupply { get; }

        [JsonProperty("BuiltOn")]
        [JsonConverter(typeof(NumericOrNaConverter<long?>))]
        public long? BuiltOn { get; }

        [JsonProperty("SmartContractAddress")]
        public string SmartContractAddress { get; }

        [JsonProperty("PreMinedValue")]
        [JsonConverter(typeof(NumericOrNaConverter<decimal?>))]
        public decimal? PreMinedValue { get; }

        [JsonProperty("TotalCoinsFreeFloat")]
        [JsonConverter(typeof(NumericOrNaConverter<ulong?>))]
        public ulong? TotalCoinsFreeFloat { get; }

        [JsonProperty("SortOrder")]
        public long SortOrder { get; }

        [JsonProperty("Sponsored")]
        public bool Sponsored { get; }

        [JsonProperty("IsTrading")]
        public bool IsTrading { get; }
    }

    public partial class CryptoCompareResponse
    {
        public static CryptoCompareResponse FromJson(string json) => JsonConvert.DeserializeObject<CryptoCompareResponse>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CryptoCompareResponse self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
